function reset(state) {
  state.start = {
    x: 0,
    y: 0
  };
  state.end = {
    x: 0,
    y: 0
  };

  state.move = {
    x: 0,
    y: 0
  };
  state.moveVector = {
    x: 0,
    y: 0
  };
  state._transformY = 0;
}
function touchstart(event) {
  var state = event.instance.getState();
  reset(state);
  //获取当前移动的手指
  var bounds = event.touches[0];
  state.start.x = bounds.clientX;
  state.start.y = bounds.clientY;
}

function touchmove(event) {
  var state = event.instance.getState();

  //获取当前移动的手指
  var bounds = event.changedTouches[0];
  var clientX = bounds.clientX;
  var clientY = bounds.clientY;
  state.end.x = clientX;
  state.end.y = clientY;
  state.moveVector.x = clientX - state.start.x;
  state.moveVector.y = clientY - state.start.y;
  state.move.x = Math.abs(clientX - state.start.x);
  state.move.y = Math.abs(clientY - state.start.y);
  state._transformY = (state.transformY || 0) + state.moveVector.y;

  event.instance.setStyle({
    transform: 'translate3d(0, ' + state._transformY + 'px, 0)'
  });
}
function touchend(event, ownerInstance) {
  var state = event.instance.getState();
  state._transformY = (state.transformY || 0) + state.moveVector.y;
  var dataSet = event.instance.getDataset();
  state.row = dataSet.row;
  var height = dataSet.height; // 单体长度
  var size = dataSet.size; // 数组个数
  if (state._transformY > 0) {
    state.transformY = 0;
  } else if (Math.abs(state._transformY / height) > size - 1) {
    state.transformY = (size - 1) * height * -1;
  } else {
    state.transformY = parseInt(Math.round(state._transformY / height), 10) * height;
  }
  var index = Math.round(Math.abs(state.transformY / height));

  if (!state.disabled) {
    state.disabled = [];
  }
  var isTop = false;
  var isBottom = false;
  // 是否是禁用
  if (state.disabled.indexOf(index) !== -1) {
    if (state.moveVector.y > 0) {
      // 向上方向
      var _index = handleNext(index, 0, size - 1, state.disabled);
      if (index < _index) {
        isTop = true;
      }
      index = _index;
    } else {
      // 向下方向
      var _index = handlePrev(index, 0, size - 1, state.disabled);
      if (_index < index) {
        isBottom = true;
      }
      index = _index;
    }
  } else {
    if (index === 0) {
      isTop = true;
    } else if (index === size - 1) {
      isBottom = true;
    } else {
    }
  }
  /** row: 原先选中值 */
  var row = state.row;

  if (index !== -1) {
    state.row = index;
  }
  state.transformY = state.row * height * -1;
  // 更换选中的值
  if (row !== state.row) {
    ownerInstance.callMethod('onSelect', {
      rowIndex: state.row,
      colAlias: dataSet.colAlias
    });
  } else {
    if (isTop || isBottom) {
      ownerInstance.callMethod('synchronous', {
        isTop: isTop,
        isBottom: isBottom,
        rowIndex: state.row,
        colAlias: dataSet.colAlias
      });
    }
  }

  event.instance.setStyle({
    transform: 'translate3d(0, ' + state.transformY + 'px, 0)',
    'transition-duration': '200ms'
  });
}

function click(event, ownerInstance) {
  var state = ownerInstance.selectComponent('.titian-picker-column-item-box').getState();
  var dataSet = event.instance.getDataset();
  var index = dataSet.row;
  var height = dataSet.height; // 单体长度

  // 是否是禁用
  if (state.disabled.indexOf(index) !== -1) {
    return;
  }
  /** row: 原先选中值 */
  var row = state.row;

  if (row === index) {
    return;
  }
  state.row = index;
  state.transformY = state.row * height * -1;
  // 更换选中的值
  if (row !== state.row) {
    ownerInstance.callMethod('onSelect', {
      rowIndex: state.row,
      colAlias: dataSet.colAlias
    });
    event.instance.setStyle({
      transform: 'translate3d(0, ' + state.transformY + 'px, 0)',
      'transition-duration': '200ms'
    });
  }
}

function handleText(value, key) {
  if (!value) {
    return '';
  }
  if (typeof value === 'string') {
    return value;
  }
  if (value.constructor === 'Object') {
    return value[key];
  }
  return value;
}
function handleDisabled(nextState, prevState, ownerInstance, instance) {
  if (nextState === prevState) {
    return;
  }
  var dataSet = instance.getDataset();
  var row = dataSet.row;
  var state = ownerInstance.selectComponent('.titian-picker-column-item-box').getState();
  if (!state.disabled) {
    if (nextState) {
      state.disabled = [row];
    }
  } else {
    if (nextState) {
      state.disabled.push(row);
    } else {
      state.disabled.splice(row, 1);
    }
  }
}
function handlePrev(index, min, max, array) {
  var idx = index;
  for (var i = index + 1; i <= max; i++) {
    if (array.indexOf(i) === -1) {
      idx = i;
      return idx;
    }
  }

  for (var i = index; i > min; i--) {
    if (array.indexOf(i) === -1) {
      idx = i;
      return idx;
    }
  }
  return -1;
}

function handleNext(index, min, max, array) {
  var idx = index;
  for (var i = index; i >= min; i--) {
    if (array.indexOf(i) === -1) {
      idx = i;
      return idx;
    }
  }
  for (var i = index + 1; i <= max; i++) {
    if (array.indexOf(i) === -1) {
      idx = i;
      return idx;
    }
  }
  return -1;
}

function handleY(nextState, prevState, ownerInstance, instance) {
  if (prevState === nextState) {
    return;
  }
  var state = instance.getState();
  if (state.transformY === nextState) {
    return;
  }
  var dataSet = instance.getDataset();
  var sports = dataSet.sports;

  state.transformY = nextState;
  if (sports) {
    instance.setStyle({
      transform: 'translate3d(0, ' + state.transformY + 'px, 0)',
      'transition-duration': '200ms'
    });
  } else {
    instance.setStyle({
      transform: 'translate3d(0, ' + state.transformY + 'px, 0)'
    });
  }
}

module.exports = {
  touchmove: touchmove,
  touchend: touchend,
  touchstart: touchstart,
  handleText: handleText,
  handleY: handleY,
  handleDisabled: handleDisabled,
  click: click
};
