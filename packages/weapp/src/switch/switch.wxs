function handleBall(size) {
  if (!size) {
    return '';
  }
  var diameter = (size / 10) * 7;
  return 'width:' + diameter + 'rpx;height:' + diameter + 'rpx;border-radius:' + diameter + 'rpx';
}
function handleBox(size) {
  if (!size) {
    return '';
  }
  var width = (size / 4) * 7;
  var diameter = (size / 10) * 7;
  var padding = (size - diameter) / 2;
  return 'width:' + width + 'rpx;height:' + size + 'rpx;padding:0 ' + padding + 'rpx;border-radius:' + size + 'rpx';
}

function reset(state, bounds) {
  state.start = {
    x: 0,
    y: 0
  };
  state.end = {
    x: 0,
    y: 0
  };

  state.move = {
    x: 0,
    y: 0
  };
  state.moveVector = {
    x: 0,
    y: 0
  };
  state.start.x = bounds.clientX;
  state.start.y = bounds.clientY;
  state.isMove = false;
}
function setSize(state, instance, ownerInstance) {
  if (!state.ballInstance) {
    state.ballInstance = ownerInstance.selectComponent('.titian-switch-ball');
  }
  state.ballSize = state.ballInstance.getBoundingClientRect();
  state.size = instance.getBoundingClientRect();
  var padding = (state.size.height - state.ballSize.height) / 2;
  state.taste = {
    left: 0,
    padding: padding,
    deformation: state.ballSize.height / 3,
    right: state.size.width - padding * 2 - state.ballSize.height
  };
}

function setStatus(state, instance, status) {
  var dataSet = instance.getDataset();
  if (status) {
    if (!instance.hasClass('titian-switch-active')) {
      instance.addClass('titian-switch-active');
      if (dataSet.activeColor) {
        instance.setStyle({
          'background-color': dataSet.activeColor
        });
      }
    }
    state.ballInstance.setStyle({
      transform: 'translate3d(' + state.taste.right + 'px, 0, 0)'
    });
  } else {
    instance.removeClass('titian-switch-active');
    if (dataSet.color) {
      instance.setStyle({
        'background-color': dataSet.color
      });
    } else {
      instance.setStyle({});
    }
    state.ballInstance.setStyle({});
  }

  state.status = status;
  state.middle = status;
}
function left(state, fn) {
  // 向左滑动
  if (state.moveVector.x > 0) {
    return;
  }

  if (state.move.x < state.taste.deformation) {
    state.transformX = state.move.x;
    if (!state.controlled) {
      state.ballInstance.setStyle({
        width: state.ballSize.width + state.move.x + 'px',
        transform: 'translate3d(' + (state.taste.right - state.move.x) + 'px, 0, 0)',
        transition: 'none'
      });
    }
    return;
  }
  if (state.transformX / state.taste.right > 0.5) {
    fn();
    return;
  }

  state.transformX = state.move.x;

  if (!state.controlled) {
    state.ballInstance.setStyle({
      width: state.ballSize.width + state.taste.deformation + 'px',
      transform: 'translate3d(' + (state.taste.right - state.move.x) + 'px, 0, 0)',
      transition: 'none'
    });
  }
}
function right(state, fn) {
  // 向右滑动
  if (state.moveVector.x < 0) {
    return;
  }
  // 形变
  if (state.moveVector.x < state.taste.deformation) {
    state.transformX = state.moveVector.x;
    if (!state.controlled) {
      state.ballInstance.setStyle({
        width: state.ballSize.width + state.moveVector.x + 'px',
        transition: 'none'
      });
    }
    return;
  }
  if (state.transformX / state.taste.right > 0.5) {
    fn();
    return;
  }

  // 正常运动
  state.transformX = state.moveVector.x;

  if (!state.controlled) {
    state.ballInstance.setStyle({
      width: state.ballSize.width + state.taste.deformation + 'px',
      transform: 'translate3d(' + (state.moveVector.x - state.taste.deformation) + 'px, 0, 0)',
      transition: 'none'
    });
  }
}
module.exports = {
  handleBall: handleBall,
  handleBox: handleBox,
  reset: reset,
  setSize: setSize,
  setStatus: setStatus,
  right: right,
  left: left
};
